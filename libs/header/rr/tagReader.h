/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package git.raceresult.com/tagReaderDLL */


#line 1 "cgo-builtin-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

typedef struct { const char *p; ptrdiff_t n; } _GoString_;

#endif

/* Start of preamble from import "C" comments.  */




/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt32 GoInt;
typedef GoUint32 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_32_bit_pointer_matching_GoInt[sizeof(void*)==32/8 ? 1:-1];

typedef _GoString_ GoString;
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// NewTagReader creates a new tag reader object and adds it to the list.

extern int NewTagReader(GoInt p0, GoInt p1);

// TRConnect connects to the given TagReader hardware.

extern int TRConnect(int p0);

// TRDisconnect disconnects from the given TagReader hardware.

extern int TRDisconnect(int p0);

// TRDoReaderAction triggers an action on the TagReader hardware.

extern int TRDoReaderAction(int p0, int p1);

// TRSendCommand sends a command to the TagReader hardware.

extern char* TRSendCommand(int p0, int p1, char* p2);

// TRSetReaderPower sets the power level of the hardware.

extern int TRSetReaderPower(int p0, int p1);

// TRGetSerialNumber reads out the serial number of the TagReader hardware.

extern char* TRGetSerialNumber(int p0);

// TRGetChipID reads out the chips ID of the TagReader hardware.

extern char* TRGetChipID(int p0);

#ifdef __cplusplus
}
#endif
